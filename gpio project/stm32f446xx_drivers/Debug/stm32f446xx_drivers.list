
stm32f446xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000ba0  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000d64  08000d64  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000d64  08000d64  00020020  2**0
                  CONTENTS
  4 .ARM          00000000  08000d64  08000d64  00020020  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000d64  08000d64  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000d64  08000d64  00010d64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000d68  08000d68  00010d68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08000d6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000064  20000020  08000d8c  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000084  08000d8c  00020084  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000215a  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000060c  00000000  00000000  000221aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000001e0  00000000  00000000  000227b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000198  00000000  00000000  00022998  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00002bae  00000000  00000000  00022b30  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00001ac3  00000000  00000000  000256de  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000b361  00000000  00000000  000271a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00032502  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000006dc  00000000  00000000  00032580  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000020 	.word	0x20000020
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000d4c 	.word	0x08000d4c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000024 	.word	0x20000024
 8000200:	08000d4c 	.word	0x08000d4c

08000204 <I2C1_GPIOInits>:
uint8_t Acc_data[] = {0x1C, 0x00};
uint8_t Acc_data1[] = {0x3B};


void I2C1_GPIOInits(void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	b084      	sub	sp, #16
 8000208:	af00      	add	r7, sp, #0
	GPIO_Handle_t I2CPins;

	I2CPins.pGPIOx = GPIOB;
 800020a:	4b0e      	ldr	r3, [pc, #56]	; (8000244 <I2C1_GPIOInits+0x40>)
 800020c:	607b      	str	r3, [r7, #4]
	I2CPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 800020e:	2302      	movs	r3, #2
 8000210:	727b      	strb	r3, [r7, #9]
	I2CPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 8000212:	2301      	movs	r3, #1
 8000214:	733b      	strb	r3, [r7, #12]
	I2CPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 8000216:	2301      	movs	r3, #1
 8000218:	72fb      	strb	r3, [r7, #11]
	I2CPins.GPIO_PinConfig.GPIO_PinAltFuncMode = 4;
 800021a:	2304      	movs	r3, #4
 800021c:	737b      	strb	r3, [r7, #13]
	I2CPins. GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 800021e:	2302      	movs	r3, #2
 8000220:	72bb      	strb	r3, [r7, #10]

	//scl
	I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_6;
 8000222:	2306      	movs	r3, #6
 8000224:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2CPins);
 8000226:	1d3b      	adds	r3, r7, #4
 8000228:	4618      	mov	r0, r3
 800022a:	f000 f959 	bl	80004e0 <GPIO_Init>


	//sda
	I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_7;
 800022e:	2307      	movs	r3, #7
 8000230:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2CPins);
 8000232:	1d3b      	adds	r3, r7, #4
 8000234:	4618      	mov	r0, r3
 8000236:	f000 f953 	bl	80004e0 <GPIO_Init>

}
 800023a:	bf00      	nop
 800023c:	3710      	adds	r7, #16
 800023e:	46bd      	mov	sp, r7
 8000240:	bd80      	pop	{r7, pc}
 8000242:	bf00      	nop
 8000244:	40020400 	.word	0x40020400

08000248 <I2C1_Inits>:

void I2C1_Inits(void)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	af00      	add	r7, sp, #0
	I2C1Handle.pI2Cx = I2C1;
 800024c:	4b09      	ldr	r3, [pc, #36]	; (8000274 <I2C1_Inits+0x2c>)
 800024e:	4a0a      	ldr	r2, [pc, #40]	; (8000278 <I2C1_Inits+0x30>)
 8000250:	601a      	str	r2, [r3, #0]
	I2C1Handle.I2C_Config.I2C_AckControl = I2C_ACK_ENABLE;
 8000252:	4b08      	ldr	r3, [pc, #32]	; (8000274 <I2C1_Inits+0x2c>)
 8000254:	2201      	movs	r2, #1
 8000256:	725a      	strb	r2, [r3, #9]
	I2C1Handle.I2C_Config.I2C_DeviceAddress = MY_ADDR;
 8000258:	4b06      	ldr	r3, [pc, #24]	; (8000274 <I2C1_Inits+0x2c>)
 800025a:	2261      	movs	r2, #97	; 0x61
 800025c:	721a      	strb	r2, [r3, #8]
	I2C1Handle.I2C_Config.I2C_FMDutyCycle = I2C_FM_DUTY_16_9;
 800025e:	4b05      	ldr	r3, [pc, #20]	; (8000274 <I2C1_Inits+0x2c>)
 8000260:	2201      	movs	r2, #1
 8000262:	729a      	strb	r2, [r3, #10]
	I2C1Handle.I2C_Config.I2C_SCLSpeed = I2C_SCL_SPEED_FM4K;
 8000264:	4b03      	ldr	r3, [pc, #12]	; (8000274 <I2C1_Inits+0x2c>)
 8000266:	4a05      	ldr	r2, [pc, #20]	; (800027c <I2C1_Inits+0x34>)
 8000268:	605a      	str	r2, [r3, #4]

	I2C_Init(&I2C1Handle);
 800026a:	4802      	ldr	r0, [pc, #8]	; (8000274 <I2C1_Inits+0x2c>)
 800026c:	f000 fbc2 	bl	80009f4 <I2C_Init>
}
 8000270:	bf00      	nop
 8000272:	bd80      	pop	{r7, pc}
 8000274:	2000003c 	.word	0x2000003c
 8000278:	40005400 	.word	0x40005400
 800027c:	00061a80 	.word	0x00061a80

08000280 <main>:


int main(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b082      	sub	sp, #8
 8000284:	af02      	add	r7, sp, #8
	I2C1_GPIOInits();
 8000286:	f7ff ffbd 	bl	8000204 <I2C1_GPIOInits>

	I2C1_Inits();
 800028a:	f7ff ffdd 	bl	8000248 <I2C1_Inits>

	I2C_PeripheralControl(I2C1,ENABLE);
 800028e:	2101      	movs	r1, #1
 8000290:	4811      	ldr	r0, [pc, #68]	; (80002d8 <main+0x58>)
 8000292:	f000 fb3a 	bl	800090a <I2C_PeripheralControl>

	//ack bit is made 1 after PE=1
	I2C_ManageAcking(I2C1,I2C_ACK_ENABLE);
 8000296:	2101      	movs	r1, #1
 8000298:	480f      	ldr	r0, [pc, #60]	; (80002d8 <main+0x58>)
 800029a:	f000 fb1a 	bl	80008d2 <I2C_ManageAcking>


		I2C_MasterSendData(&I2C1Handle,Power_data,2,SLAVE_ADDR,0);
 800029e:	2300      	movs	r3, #0
 80002a0:	9300      	str	r3, [sp, #0]
 80002a2:	2368      	movs	r3, #104	; 0x68
 80002a4:	2202      	movs	r2, #2
 80002a6:	490d      	ldr	r1, [pc, #52]	; (80002dc <main+0x5c>)
 80002a8:	480d      	ldr	r0, [pc, #52]	; (80002e0 <main+0x60>)
 80002aa:	f000 fc55 	bl	8000b58 <I2C_MasterSendData>
		I2C_MasterSendData(&I2C1Handle,Acc_data,2,SLAVE_ADDR,0);
 80002ae:	2300      	movs	r3, #0
 80002b0:	9300      	str	r3, [sp, #0]
 80002b2:	2368      	movs	r3, #104	; 0x68
 80002b4:	2202      	movs	r2, #2
 80002b6:	490b      	ldr	r1, [pc, #44]	; (80002e4 <main+0x64>)
 80002b8:	4809      	ldr	r0, [pc, #36]	; (80002e0 <main+0x60>)
 80002ba:	f000 fc4d 	bl	8000b58 <I2C_MasterSendData>

		I2C_MasterSendData(&I2C1Handle,Acc_data1,1,SLAVE_ADDR,0);
 80002be:	2300      	movs	r3, #0
 80002c0:	9300      	str	r3, [sp, #0]
 80002c2:	2368      	movs	r3, #104	; 0x68
 80002c4:	2201      	movs	r2, #1
 80002c6:	4908      	ldr	r1, [pc, #32]	; (80002e8 <main+0x68>)
 80002c8:	4805      	ldr	r0, [pc, #20]	; (80002e0 <main+0x60>)
 80002ca:	f000 fc45 	bl	8000b58 <I2C_MasterSendData>
 80002ce:	2300      	movs	r3, #0
}
 80002d0:	4618      	mov	r0, r3
 80002d2:	46bd      	mov	sp, r7
 80002d4:	bd80      	pop	{r7, pc}
 80002d6:	bf00      	nop
 80002d8:	40005400 	.word	0x40005400
 80002dc:	20000000 	.word	0x20000000
 80002e0:	2000003c 	.word	0x2000003c
 80002e4:	20000004 	.word	0x20000004
 80002e8:	20000008 	.word	0x20000008

080002ec <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002ec:	480d      	ldr	r0, [pc, #52]	; (8000324 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002ee:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80002f0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002f4:	480c      	ldr	r0, [pc, #48]	; (8000328 <LoopForever+0x6>)
  ldr r1, =_edata
 80002f6:	490d      	ldr	r1, [pc, #52]	; (800032c <LoopForever+0xa>)
  ldr r2, =_sidata
 80002f8:	4a0d      	ldr	r2, [pc, #52]	; (8000330 <LoopForever+0xe>)
  movs r3, #0
 80002fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002fc:	e002      	b.n	8000304 <LoopCopyDataInit>

080002fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000300:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000302:	3304      	adds	r3, #4

08000304 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000304:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000306:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000308:	d3f9      	bcc.n	80002fe <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800030a:	4a0a      	ldr	r2, [pc, #40]	; (8000334 <LoopForever+0x12>)
  ldr r4, =_ebss
 800030c:	4c0a      	ldr	r4, [pc, #40]	; (8000338 <LoopForever+0x16>)
  movs r3, #0
 800030e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000310:	e001      	b.n	8000316 <LoopFillZerobss>

08000312 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000312:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000314:	3204      	adds	r2, #4

08000316 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000316:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000318:	d3fb      	bcc.n	8000312 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800031a:	f000 fcf3 	bl	8000d04 <__libc_init_array>
/* Call the application's entry point.*/
bl main
 800031e:	f7ff ffaf 	bl	8000280 <main>

08000322 <LoopForever>:

LoopForever:
    b LoopForever
 8000322:	e7fe      	b.n	8000322 <LoopForever>
  ldr   r0, =_estack
 8000324:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000328:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800032c:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8000330:	08000d6c 	.word	0x08000d6c
  ldr r2, =_sbss
 8000334:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8000338:	20000084 	.word	0x20000084

0800033c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800033c:	e7fe      	b.n	800033c <ADC_IRQHandler>
	...

08000340 <GPIO_PeriClockControl>:
 *@parameter 2-  enable or disable clock macros for that peripheral
 *@return - none
 */

void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 8000340:	b480      	push	{r7}
 8000342:	b083      	sub	sp, #12
 8000344:	af00      	add	r7, sp, #0
 8000346:	6078      	str	r0, [r7, #4]
 8000348:	460b      	mov	r3, r1
 800034a:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE){
 800034c:	78fb      	ldrb	r3, [r7, #3]
 800034e:	2b01      	cmp	r3, #1
 8000350:	d157      	bne.n	8000402 <GPIO_PeriClockControl+0xc2>
		if(pGPIOx == GPIOA){
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	4a59      	ldr	r2, [pc, #356]	; (80004bc <GPIO_PeriClockControl+0x17c>)
 8000356:	4293      	cmp	r3, r2
 8000358:	d106      	bne.n	8000368 <GPIO_PeriClockControl+0x28>
			GPIOA_PCLK_EN();
 800035a:	4b59      	ldr	r3, [pc, #356]	; (80004c0 <GPIO_PeriClockControl+0x180>)
 800035c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800035e:	4a58      	ldr	r2, [pc, #352]	; (80004c0 <GPIO_PeriClockControl+0x180>)
 8000360:	f043 0301 	orr.w	r3, r3, #1
 8000364:	6313      	str	r3, [r2, #48]	; 0x30
						}

	}


}
 8000366:	e0a3      	b.n	80004b0 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOB){
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	4a56      	ldr	r2, [pc, #344]	; (80004c4 <GPIO_PeriClockControl+0x184>)
 800036c:	4293      	cmp	r3, r2
 800036e:	d106      	bne.n	800037e <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000370:	4b53      	ldr	r3, [pc, #332]	; (80004c0 <GPIO_PeriClockControl+0x180>)
 8000372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000374:	4a52      	ldr	r2, [pc, #328]	; (80004c0 <GPIO_PeriClockControl+0x180>)
 8000376:	f043 0302 	orr.w	r3, r3, #2
 800037a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800037c:	e098      	b.n	80004b0 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOC){
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	4a51      	ldr	r2, [pc, #324]	; (80004c8 <GPIO_PeriClockControl+0x188>)
 8000382:	4293      	cmp	r3, r2
 8000384:	d106      	bne.n	8000394 <GPIO_PeriClockControl+0x54>
					GPIOC_PCLK_EN();
 8000386:	4b4e      	ldr	r3, [pc, #312]	; (80004c0 <GPIO_PeriClockControl+0x180>)
 8000388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800038a:	4a4d      	ldr	r2, [pc, #308]	; (80004c0 <GPIO_PeriClockControl+0x180>)
 800038c:	f043 0304 	orr.w	r3, r3, #4
 8000390:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000392:	e08d      	b.n	80004b0 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOD){
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	4a4d      	ldr	r2, [pc, #308]	; (80004cc <GPIO_PeriClockControl+0x18c>)
 8000398:	4293      	cmp	r3, r2
 800039a:	d106      	bne.n	80003aa <GPIO_PeriClockControl+0x6a>
					GPIOD_PCLK_EN();
 800039c:	4b48      	ldr	r3, [pc, #288]	; (80004c0 <GPIO_PeriClockControl+0x180>)
 800039e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003a0:	4a47      	ldr	r2, [pc, #284]	; (80004c0 <GPIO_PeriClockControl+0x180>)
 80003a2:	f043 0308 	orr.w	r3, r3, #8
 80003a6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003a8:	e082      	b.n	80004b0 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOE){
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	4a48      	ldr	r2, [pc, #288]	; (80004d0 <GPIO_PeriClockControl+0x190>)
 80003ae:	4293      	cmp	r3, r2
 80003b0:	d106      	bne.n	80003c0 <GPIO_PeriClockControl+0x80>
						GPIOE_PCLK_EN();
 80003b2:	4b43      	ldr	r3, [pc, #268]	; (80004c0 <GPIO_PeriClockControl+0x180>)
 80003b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003b6:	4a42      	ldr	r2, [pc, #264]	; (80004c0 <GPIO_PeriClockControl+0x180>)
 80003b8:	f043 0310 	orr.w	r3, r3, #16
 80003bc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003be:	e077      	b.n	80004b0 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOF){
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	4a44      	ldr	r2, [pc, #272]	; (80004d4 <GPIO_PeriClockControl+0x194>)
 80003c4:	4293      	cmp	r3, r2
 80003c6:	d106      	bne.n	80003d6 <GPIO_PeriClockControl+0x96>
						GPIOF_PCLK_EN();
 80003c8:	4b3d      	ldr	r3, [pc, #244]	; (80004c0 <GPIO_PeriClockControl+0x180>)
 80003ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003cc:	4a3c      	ldr	r2, [pc, #240]	; (80004c0 <GPIO_PeriClockControl+0x180>)
 80003ce:	f043 0320 	orr.w	r3, r3, #32
 80003d2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003d4:	e06c      	b.n	80004b0 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOG){
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	4a3f      	ldr	r2, [pc, #252]	; (80004d8 <GPIO_PeriClockControl+0x198>)
 80003da:	4293      	cmp	r3, r2
 80003dc:	d106      	bne.n	80003ec <GPIO_PeriClockControl+0xac>
						GPIOG_PCLK_EN();
 80003de:	4b38      	ldr	r3, [pc, #224]	; (80004c0 <GPIO_PeriClockControl+0x180>)
 80003e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003e2:	4a37      	ldr	r2, [pc, #220]	; (80004c0 <GPIO_PeriClockControl+0x180>)
 80003e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80003e8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003ea:	e061      	b.n	80004b0 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOH){
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	4a3b      	ldr	r2, [pc, #236]	; (80004dc <GPIO_PeriClockControl+0x19c>)
 80003f0:	4293      	cmp	r3, r2
 80003f2:	d15d      	bne.n	80004b0 <GPIO_PeriClockControl+0x170>
						GPIOH_PCLK_EN();
 80003f4:	4b32      	ldr	r3, [pc, #200]	; (80004c0 <GPIO_PeriClockControl+0x180>)
 80003f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003f8:	4a31      	ldr	r2, [pc, #196]	; (80004c0 <GPIO_PeriClockControl+0x180>)
 80003fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003fe:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000400:	e056      	b.n	80004b0 <GPIO_PeriClockControl+0x170>
		if(pGPIOx == GPIOA){
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	4a2d      	ldr	r2, [pc, #180]	; (80004bc <GPIO_PeriClockControl+0x17c>)
 8000406:	4293      	cmp	r3, r2
 8000408:	d106      	bne.n	8000418 <GPIO_PeriClockControl+0xd8>
				GPIOA_PCLK_DI();
 800040a:	4b2d      	ldr	r3, [pc, #180]	; (80004c0 <GPIO_PeriClockControl+0x180>)
 800040c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800040e:	4a2c      	ldr	r2, [pc, #176]	; (80004c0 <GPIO_PeriClockControl+0x180>)
 8000410:	f023 0301 	bic.w	r3, r3, #1
 8000414:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000416:	e04b      	b.n	80004b0 <GPIO_PeriClockControl+0x170>
			else if(pGPIOx == GPIOB){
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	4a2a      	ldr	r2, [pc, #168]	; (80004c4 <GPIO_PeriClockControl+0x184>)
 800041c:	4293      	cmp	r3, r2
 800041e:	d106      	bne.n	800042e <GPIO_PeriClockControl+0xee>
				GPIOB_PCLK_DI();
 8000420:	4b27      	ldr	r3, [pc, #156]	; (80004c0 <GPIO_PeriClockControl+0x180>)
 8000422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000424:	4a26      	ldr	r2, [pc, #152]	; (80004c0 <GPIO_PeriClockControl+0x180>)
 8000426:	f023 0302 	bic.w	r3, r3, #2
 800042a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800042c:	e040      	b.n	80004b0 <GPIO_PeriClockControl+0x170>
			else if(pGPIOx == GPIOC){
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	4a25      	ldr	r2, [pc, #148]	; (80004c8 <GPIO_PeriClockControl+0x188>)
 8000432:	4293      	cmp	r3, r2
 8000434:	d106      	bne.n	8000444 <GPIO_PeriClockControl+0x104>
						GPIOC_PCLK_DI();
 8000436:	4b22      	ldr	r3, [pc, #136]	; (80004c0 <GPIO_PeriClockControl+0x180>)
 8000438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800043a:	4a21      	ldr	r2, [pc, #132]	; (80004c0 <GPIO_PeriClockControl+0x180>)
 800043c:	f023 0304 	bic.w	r3, r3, #4
 8000440:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000442:	e035      	b.n	80004b0 <GPIO_PeriClockControl+0x170>
			else if(pGPIOx == GPIOD){
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	4a21      	ldr	r2, [pc, #132]	; (80004cc <GPIO_PeriClockControl+0x18c>)
 8000448:	4293      	cmp	r3, r2
 800044a:	d106      	bne.n	800045a <GPIO_PeriClockControl+0x11a>
						GPIOD_PCLK_DI();
 800044c:	4b1c      	ldr	r3, [pc, #112]	; (80004c0 <GPIO_PeriClockControl+0x180>)
 800044e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000450:	4a1b      	ldr	r2, [pc, #108]	; (80004c0 <GPIO_PeriClockControl+0x180>)
 8000452:	f023 0308 	bic.w	r3, r3, #8
 8000456:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000458:	e02a      	b.n	80004b0 <GPIO_PeriClockControl+0x170>
			else if(pGPIOx == GPIOE){
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	4a1c      	ldr	r2, [pc, #112]	; (80004d0 <GPIO_PeriClockControl+0x190>)
 800045e:	4293      	cmp	r3, r2
 8000460:	d106      	bne.n	8000470 <GPIO_PeriClockControl+0x130>
							GPIOE_PCLK_DI();
 8000462:	4b17      	ldr	r3, [pc, #92]	; (80004c0 <GPIO_PeriClockControl+0x180>)
 8000464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000466:	4a16      	ldr	r2, [pc, #88]	; (80004c0 <GPIO_PeriClockControl+0x180>)
 8000468:	f023 0310 	bic.w	r3, r3, #16
 800046c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800046e:	e01f      	b.n	80004b0 <GPIO_PeriClockControl+0x170>
			else if(pGPIOx == GPIOF){
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	4a18      	ldr	r2, [pc, #96]	; (80004d4 <GPIO_PeriClockControl+0x194>)
 8000474:	4293      	cmp	r3, r2
 8000476:	d106      	bne.n	8000486 <GPIO_PeriClockControl+0x146>
							GPIOF_PCLK_DI();
 8000478:	4b11      	ldr	r3, [pc, #68]	; (80004c0 <GPIO_PeriClockControl+0x180>)
 800047a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800047c:	4a10      	ldr	r2, [pc, #64]	; (80004c0 <GPIO_PeriClockControl+0x180>)
 800047e:	f023 0320 	bic.w	r3, r3, #32
 8000482:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000484:	e014      	b.n	80004b0 <GPIO_PeriClockControl+0x170>
			else if(pGPIOx == GPIOG){
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	4a13      	ldr	r2, [pc, #76]	; (80004d8 <GPIO_PeriClockControl+0x198>)
 800048a:	4293      	cmp	r3, r2
 800048c:	d106      	bne.n	800049c <GPIO_PeriClockControl+0x15c>
							GPIOG_PCLK_DI();
 800048e:	4b0c      	ldr	r3, [pc, #48]	; (80004c0 <GPIO_PeriClockControl+0x180>)
 8000490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000492:	4a0b      	ldr	r2, [pc, #44]	; (80004c0 <GPIO_PeriClockControl+0x180>)
 8000494:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000498:	6313      	str	r3, [r2, #48]	; 0x30
}
 800049a:	e009      	b.n	80004b0 <GPIO_PeriClockControl+0x170>
			else if(pGPIOx == GPIOH){
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	4a0f      	ldr	r2, [pc, #60]	; (80004dc <GPIO_PeriClockControl+0x19c>)
 80004a0:	4293      	cmp	r3, r2
 80004a2:	d105      	bne.n	80004b0 <GPIO_PeriClockControl+0x170>
							GPIOH_PCLK_DI();
 80004a4:	4b06      	ldr	r3, [pc, #24]	; (80004c0 <GPIO_PeriClockControl+0x180>)
 80004a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004a8:	4a05      	ldr	r2, [pc, #20]	; (80004c0 <GPIO_PeriClockControl+0x180>)
 80004aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80004ae:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004b0:	bf00      	nop
 80004b2:	370c      	adds	r7, #12
 80004b4:	46bd      	mov	sp, r7
 80004b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ba:	4770      	bx	lr
 80004bc:	40020000 	.word	0x40020000
 80004c0:	40023800 	.word	0x40023800
 80004c4:	40020400 	.word	0x40020400
 80004c8:	40020800 	.word	0x40020800
 80004cc:	40020c00 	.word	0x40020c00
 80004d0:	40021000 	.word	0x40021000
 80004d4:	40021400 	.word	0x40021400
 80004d8:	40021800 	.word	0x40021800
 80004dc:	40021c00 	.word	0x40021c00

080004e0 <GPIO_Init>:
 *@brief-  enable different registers of GPIO e.g. pinmode, pinspeed,etc.
 *@parameter 1 - can contain register definition of a particular port or pin configuration
 *@return - none
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b086      	sub	sp, #24
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0;
 80004e8:	2300      	movs	r3, #0
 80004ea:	617b      	str	r3, [r7, #20]
	//enable peripheral clock For a particular gpio port

	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	2101      	movs	r1, #1
 80004f2:	4618      	mov	r0, r3
 80004f4:	f7ff ff24 	bl	8000340 <GPIO_PeriClockControl>

	// 1. configure the modes of GPIO pin
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)//for non-interrupt mode
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	795b      	ldrb	r3, [r3, #5]
 80004fc:	2b03      	cmp	r3, #3
 80004fe:	d81f      	bhi.n	8000540 <GPIO_Init+0x60>
	{
		temp = ( pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //pin mode will be given by user
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	795b      	ldrb	r3, [r3, #5]
 8000504:	461a      	mov	r2, r3
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	791b      	ldrb	r3, [r3, #4]
 800050a:	005b      	lsls	r3, r3, #1
 800050c:	fa02 f303 	lsl.w	r3, r2, r3
 8000510:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~( 0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing that particular bit of the MODER register
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	681a      	ldr	r2, [r3, #0]
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	791b      	ldrb	r3, [r3, #4]
 800051c:	4619      	mov	r1, r3
 800051e:	2303      	movs	r3, #3
 8000520:	408b      	lsls	r3, r1
 8000522:	43db      	mvns	r3, r3
 8000524:	4619      	mov	r1, r3
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	400a      	ands	r2, r1
 800052c:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp; //setting the particular value of MODER register
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	6819      	ldr	r1, [r3, #0]
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	697a      	ldr	r2, [r7, #20]
 800053a:	430a      	orrs	r2, r1
 800053c:	601a      	str	r2, [r3, #0]
 800053e:	e0a8      	b.n	8000692 <GPIO_Init+0x1b2>

	}

	else
	{
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT )
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	795b      	ldrb	r3, [r3, #5]
 8000544:	2b04      	cmp	r3, #4
 8000546:	d117      	bne.n	8000578 <GPIO_Init+0x98>
	{  //1. configure FTSR(falling trigger selection register)
       EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);//only falling edge detection
 8000548:	4ba1      	ldr	r3, [pc, #644]	; (80007d0 <GPIO_Init+0x2f0>)
 800054a:	68db      	ldr	r3, [r3, #12]
 800054c:	687a      	ldr	r2, [r7, #4]
 800054e:	7912      	ldrb	r2, [r2, #4]
 8000550:	4611      	mov	r1, r2
 8000552:	2201      	movs	r2, #1
 8000554:	408a      	lsls	r2, r1
 8000556:	4611      	mov	r1, r2
 8000558:	4a9d      	ldr	r2, [pc, #628]	; (80007d0 <GPIO_Init+0x2f0>)
 800055a:	430b      	orrs	r3, r1
 800055c:	60d3      	str	r3, [r2, #12]
       EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);//as we want falling edge detection so we clear rising edge detection register if it is by chance high
 800055e:	4b9c      	ldr	r3, [pc, #624]	; (80007d0 <GPIO_Init+0x2f0>)
 8000560:	689b      	ldr	r3, [r3, #8]
 8000562:	687a      	ldr	r2, [r7, #4]
 8000564:	7912      	ldrb	r2, [r2, #4]
 8000566:	4611      	mov	r1, r2
 8000568:	2201      	movs	r2, #1
 800056a:	408a      	lsls	r2, r1
 800056c:	43d2      	mvns	r2, r2
 800056e:	4611      	mov	r1, r2
 8000570:	4a97      	ldr	r2, [pc, #604]	; (80007d0 <GPIO_Init+0x2f0>)
 8000572:	400b      	ands	r3, r1
 8000574:	6093      	str	r3, [r2, #8]
 8000576:	e035      	b.n	80005e4 <GPIO_Init+0x104>


	}

	else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	795b      	ldrb	r3, [r3, #5]
 800057c:	2b05      	cmp	r3, #5
 800057e:	d117      	bne.n	80005b0 <GPIO_Init+0xd0>
	{   //1. configure RTSR(rising trigger selection register)
		EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);//only rising edge detection
 8000580:	4b93      	ldr	r3, [pc, #588]	; (80007d0 <GPIO_Init+0x2f0>)
 8000582:	689b      	ldr	r3, [r3, #8]
 8000584:	687a      	ldr	r2, [r7, #4]
 8000586:	7912      	ldrb	r2, [r2, #4]
 8000588:	4611      	mov	r1, r2
 800058a:	2201      	movs	r2, #1
 800058c:	408a      	lsls	r2, r1
 800058e:	4611      	mov	r1, r2
 8000590:	4a8f      	ldr	r2, [pc, #572]	; (80007d0 <GPIO_Init+0x2f0>)
 8000592:	430b      	orrs	r3, r1
 8000594:	6093      	str	r3, [r2, #8]
		EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);//as we want rising edge detection so we clear rising edge detection register if it is by chance high
 8000596:	4b8e      	ldr	r3, [pc, #568]	; (80007d0 <GPIO_Init+0x2f0>)
 8000598:	68db      	ldr	r3, [r3, #12]
 800059a:	687a      	ldr	r2, [r7, #4]
 800059c:	7912      	ldrb	r2, [r2, #4]
 800059e:	4611      	mov	r1, r2
 80005a0:	2201      	movs	r2, #1
 80005a2:	408a      	lsls	r2, r1
 80005a4:	43d2      	mvns	r2, r2
 80005a6:	4611      	mov	r1, r2
 80005a8:	4a89      	ldr	r2, [pc, #548]	; (80007d0 <GPIO_Init+0x2f0>)
 80005aa:	400b      	ands	r3, r1
 80005ac:	60d3      	str	r3, [r2, #12]
 80005ae:	e019      	b.n	80005e4 <GPIO_Init+0x104>

	}
	else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	795b      	ldrb	r3, [r3, #5]
 80005b4:	2b06      	cmp	r3, #6
 80005b6:	d115      	bne.n	80005e4 <GPIO_Init+0x104>
	{    //we want detection of both the rising and falling edges, hence enable both the registers
		EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);// falling edge detection
 80005b8:	4b85      	ldr	r3, [pc, #532]	; (80007d0 <GPIO_Init+0x2f0>)
 80005ba:	68db      	ldr	r3, [r3, #12]
 80005bc:	687a      	ldr	r2, [r7, #4]
 80005be:	7912      	ldrb	r2, [r2, #4]
 80005c0:	4611      	mov	r1, r2
 80005c2:	2201      	movs	r2, #1
 80005c4:	408a      	lsls	r2, r1
 80005c6:	4611      	mov	r1, r2
 80005c8:	4a81      	ldr	r2, [pc, #516]	; (80007d0 <GPIO_Init+0x2f0>)
 80005ca:	430b      	orrs	r3, r1
 80005cc:	60d3      	str	r3, [r2, #12]
		EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);//rising edge detection
 80005ce:	4b80      	ldr	r3, [pc, #512]	; (80007d0 <GPIO_Init+0x2f0>)
 80005d0:	689b      	ldr	r3, [r3, #8]
 80005d2:	687a      	ldr	r2, [r7, #4]
 80005d4:	7912      	ldrb	r2, [r2, #4]
 80005d6:	4611      	mov	r1, r2
 80005d8:	2201      	movs	r2, #1
 80005da:	408a      	lsls	r2, r1
 80005dc:	4611      	mov	r1, r2
 80005de:	4a7c      	ldr	r2, [pc, #496]	; (80007d0 <GPIO_Init+0x2f0>)
 80005e0:	430b      	orrs	r3, r1
 80005e2:	6093      	str	r3, [r2, #8]

	}

	//2.configure the GPIO port selection in SYSCFG_EXTICR
	 uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;// this gives which EXTI1 register we should use i.e. EXTI-0,1,2,3
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	791b      	ldrb	r3, [r3, #4]
 80005e8:	089b      	lsrs	r3, r3, #2
 80005ea:	74fb      	strb	r3, [r7, #19]
	 uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;// this tells out of which EXTI1 register we should configure a particular EXTI line present in that register
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	791b      	ldrb	r3, [r3, #4]
 80005f0:	f003 0303 	and.w	r3, r3, #3
 80005f4:	74bb      	strb	r3, [r7, #18]
	 uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);// this convert given port address(a,b,c,...) to code which is used in EXTI registers
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	4a76      	ldr	r2, [pc, #472]	; (80007d4 <GPIO_Init+0x2f4>)
 80005fc:	4293      	cmp	r3, r2
 80005fe:	d02b      	beq.n	8000658 <GPIO_Init+0x178>
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	4a74      	ldr	r2, [pc, #464]	; (80007d8 <GPIO_Init+0x2f8>)
 8000606:	4293      	cmp	r3, r2
 8000608:	d024      	beq.n	8000654 <GPIO_Init+0x174>
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	4a73      	ldr	r2, [pc, #460]	; (80007dc <GPIO_Init+0x2fc>)
 8000610:	4293      	cmp	r3, r2
 8000612:	d01d      	beq.n	8000650 <GPIO_Init+0x170>
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	4a71      	ldr	r2, [pc, #452]	; (80007e0 <GPIO_Init+0x300>)
 800061a:	4293      	cmp	r3, r2
 800061c:	d016      	beq.n	800064c <GPIO_Init+0x16c>
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	4a70      	ldr	r2, [pc, #448]	; (80007e4 <GPIO_Init+0x304>)
 8000624:	4293      	cmp	r3, r2
 8000626:	d00f      	beq.n	8000648 <GPIO_Init+0x168>
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	4a6e      	ldr	r2, [pc, #440]	; (80007e8 <GPIO_Init+0x308>)
 800062e:	4293      	cmp	r3, r2
 8000630:	d008      	beq.n	8000644 <GPIO_Init+0x164>
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	4a6d      	ldr	r2, [pc, #436]	; (80007ec <GPIO_Init+0x30c>)
 8000638:	4293      	cmp	r3, r2
 800063a:	d101      	bne.n	8000640 <GPIO_Init+0x160>
 800063c:	2306      	movs	r3, #6
 800063e:	e00c      	b.n	800065a <GPIO_Init+0x17a>
 8000640:	2300      	movs	r3, #0
 8000642:	e00a      	b.n	800065a <GPIO_Init+0x17a>
 8000644:	2305      	movs	r3, #5
 8000646:	e008      	b.n	800065a <GPIO_Init+0x17a>
 8000648:	2304      	movs	r3, #4
 800064a:	e006      	b.n	800065a <GPIO_Init+0x17a>
 800064c:	2303      	movs	r3, #3
 800064e:	e004      	b.n	800065a <GPIO_Init+0x17a>
 8000650:	2302      	movs	r3, #2
 8000652:	e002      	b.n	800065a <GPIO_Init+0x17a>
 8000654:	2301      	movs	r3, #1
 8000656:	e000      	b.n	800065a <GPIO_Init+0x17a>
 8000658:	2300      	movs	r3, #0
 800065a:	747b      	strb	r3, [r7, #17]
	 SYSCFG_PCLK_EN(); //enabling clock for this SYSCFG register
 800065c:	4b64      	ldr	r3, [pc, #400]	; (80007f0 <GPIO_Init+0x310>)
 800065e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000660:	4a63      	ldr	r2, [pc, #396]	; (80007f0 <GPIO_Init+0x310>)
 8000662:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000666:	6453      	str	r3, [r2, #68]	; 0x44
	 SYSCFG->EXTI1CR[temp1] = portcode << (temp2 * 4); // write the value of that particular port address to that register
 8000668:	7c7a      	ldrb	r2, [r7, #17]
 800066a:	7cbb      	ldrb	r3, [r7, #18]
 800066c:	009b      	lsls	r3, r3, #2
 800066e:	fa02 f103 	lsl.w	r1, r2, r3
 8000672:	4a60      	ldr	r2, [pc, #384]	; (80007f4 <GPIO_Init+0x314>)
 8000674:	7cfb      	ldrb	r3, [r7, #19]
 8000676:	3302      	adds	r3, #2
 8000678:	f842 1023 	str.w	r1, [r2, r3, lsl #2]



	//3. enable the exti interrupt delivery using IMR
	   EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800067c:	4b54      	ldr	r3, [pc, #336]	; (80007d0 <GPIO_Init+0x2f0>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	687a      	ldr	r2, [r7, #4]
 8000682:	7912      	ldrb	r2, [r2, #4]
 8000684:	4611      	mov	r1, r2
 8000686:	2201      	movs	r2, #1
 8000688:	408a      	lsls	r2, r1
 800068a:	4611      	mov	r1, r2
 800068c:	4a50      	ldr	r2, [pc, #320]	; (80007d0 <GPIO_Init+0x2f0>)
 800068e:	430b      	orrs	r3, r1
 8000690:	6013      	str	r3, [r2, #0]



	}

	temp = 0;
 8000692:	2300      	movs	r3, #0
 8000694:	617b      	str	r3, [r7, #20]

	//2. configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed  << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	799b      	ldrb	r3, [r3, #6]
 800069a:	461a      	mov	r2, r3
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	791b      	ldrb	r3, [r3, #4]
 80006a0:	005b      	lsls	r3, r3, #1
 80006a2:	fa02 f303 	lsl.w	r3, r2, r3
 80006a6:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDER &= ~( 0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	689a      	ldr	r2, [r3, #8]
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	791b      	ldrb	r3, [r3, #4]
 80006b2:	4619      	mov	r1, r3
 80006b4:	2303      	movs	r3, #3
 80006b6:	408b      	lsls	r3, r1
 80006b8:	43db      	mvns	r3, r3
 80006ba:	4619      	mov	r1, r3
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	400a      	ands	r2, r1
 80006c2:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDER |= temp;
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	6899      	ldr	r1, [r3, #8]
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	697a      	ldr	r2, [r7, #20]
 80006d0:	430a      	orrs	r2, r1
 80006d2:	609a      	str	r2, [r3, #8]
	temp = 0;
 80006d4:	2300      	movs	r3, #0
 80006d6:	617b      	str	r3, [r7, #20]


	//3. configure the pupd settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl  << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	79db      	ldrb	r3, [r3, #7]
 80006dc:	461a      	mov	r2, r3
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	791b      	ldrb	r3, [r3, #4]
 80006e2:	005b      	lsls	r3, r3, #1
 80006e4:	fa02 f303 	lsl.w	r3, r2, r3
 80006e8:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~( 0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	68da      	ldr	r2, [r3, #12]
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	791b      	ldrb	r3, [r3, #4]
 80006f4:	4619      	mov	r1, r3
 80006f6:	2303      	movs	r3, #3
 80006f8:	408b      	lsls	r3, r1
 80006fa:	43db      	mvns	r3, r3
 80006fc:	4619      	mov	r1, r3
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	400a      	ands	r2, r1
 8000704:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	68d9      	ldr	r1, [r3, #12]
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	697a      	ldr	r2, [r7, #20]
 8000712:	430a      	orrs	r2, r1
 8000714:	60da      	str	r2, [r3, #12]
	temp = 0;
 8000716:	2300      	movs	r3, #0
 8000718:	617b      	str	r3, [r7, #20]


	//4. configure the output type
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType  << ( pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	7a1b      	ldrb	r3, [r3, #8]
 800071e:	461a      	mov	r2, r3
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	791b      	ldrb	r3, [r3, #4]
 8000724:	fa02 f303 	lsl.w	r3, r2, r3
 8000728:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~( 0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	685a      	ldr	r2, [r3, #4]
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	791b      	ldrb	r3, [r3, #4]
 8000734:	4619      	mov	r1, r3
 8000736:	2301      	movs	r3, #1
 8000738:	408b      	lsls	r3, r1
 800073a:	43db      	mvns	r3, r3
 800073c:	4619      	mov	r1, r3
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	400a      	ands	r2, r1
 8000744:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	6859      	ldr	r1, [r3, #4]
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	697a      	ldr	r2, [r7, #20]
 8000752:	430a      	orrs	r2, r1
 8000754:	605a      	str	r2, [r3, #4]
	temp = 0;
 8000756:	2300      	movs	r3, #0
 8000758:	617b      	str	r3, [r7, #20]


	//5. configure the alternate functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN){
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	795b      	ldrb	r3, [r3, #5]
 800075e:	2b02      	cmp	r3, #2
 8000760:	d131      	bne.n	80007c6 <GPIO_Init+0x2e6>
		uint8_t temp1, temp2;
		temp1 =  pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8; //this tells whether we have to use AFR[0] or AFR[1]
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	791b      	ldrb	r3, [r3, #4]
 8000766:	08db      	lsrs	r3, r3, #3
 8000768:	743b      	strb	r3, [r7, #16]
		temp2 =  pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8 ; //this tell to which position we have to shift value of the register
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	791b      	ldrb	r3, [r3, #4]
 800076e:	f003 0307 	and.w	r3, r3, #7
 8000772:	73fb      	strb	r3, [r7, #15]
	    pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << (4 * temp2)); //clearing
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	7c3a      	ldrb	r2, [r7, #16]
 800077a:	3208      	adds	r2, #8
 800077c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000780:	7bfb      	ldrb	r3, [r7, #15]
 8000782:	009b      	lsls	r3, r3, #2
 8000784:	220f      	movs	r2, #15
 8000786:	fa02 f303 	lsl.w	r3, r2, r3
 800078a:	43db      	mvns	r3, r3
 800078c:	4618      	mov	r0, r3
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	7c3a      	ldrb	r2, [r7, #16]
 8000794:	4001      	ands	r1, r0
 8000796:	3208      	adds	r2, #8
 8000798:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFuncMode << (4 * temp2));
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	7c3a      	ldrb	r2, [r7, #16]
 80007a2:	3208      	adds	r2, #8
 80007a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	7a5b      	ldrb	r3, [r3, #9]
 80007ac:	461a      	mov	r2, r3
 80007ae:	7bfb      	ldrb	r3, [r7, #15]
 80007b0:	009b      	lsls	r3, r3, #2
 80007b2:	fa02 f303 	lsl.w	r3, r2, r3
 80007b6:	4618      	mov	r0, r3
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	7c3a      	ldrb	r2, [r7, #16]
 80007be:	4301      	orrs	r1, r0
 80007c0:	3208      	adds	r2, #8
 80007c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]


	}


}
 80007c6:	bf00      	nop
 80007c8:	3718      	adds	r7, #24
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	40013c00 	.word	0x40013c00
 80007d4:	40020000 	.word	0x40020000
 80007d8:	40020400 	.word	0x40020400
 80007dc:	40020800 	.word	0x40020800
 80007e0:	40020c00 	.word	0x40020c00
 80007e4:	40021000 	.word	0x40021000
 80007e8:	40021400 	.word	0x40021400
 80007ec:	40021800 	.word	0x40021800
 80007f0:	40023800 	.word	0x40023800
 80007f4:	40013800 	.word	0x40013800

080007f8 <I2C_GenerateStartCondition>:
static void I2C_MasterHandleRXNEInterrupt(I2C_Handle_t *pI2CHandle );


//function to generate start condition
static void I2C_GenerateStartCondition(I2C_RegDef_t *pI2Cx)
{
 80007f8:	b480      	push	{r7}
 80007fa:	b083      	sub	sp, #12
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
	pI2Cx->I2C_CR1 |= ( 1 << I2C_CR1_START);
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	601a      	str	r2, [r3, #0]
}
 800080c:	bf00      	nop
 800080e:	370c      	adds	r7, #12
 8000810:	46bd      	mov	sp, r7
 8000812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000816:	4770      	bx	lr

08000818 <I2C_ExecuteAddressPhaseWrite>:

//function to execute address phase and enable write operation
static void I2C_ExecuteAddressPhaseWrite(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr)
{
 8000818:	b480      	push	{r7}
 800081a:	b083      	sub	sp, #12
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
 8000820:	460b      	mov	r3, r1
 8000822:	70fb      	strb	r3, [r7, #3]
	SlaveAddr = SlaveAddr << 1;// as we want 7 bit slave address
 8000824:	78fb      	ldrb	r3, [r7, #3]
 8000826:	005b      	lsls	r3, r3, #1
 8000828:	70fb      	strb	r3, [r7, #3]
	SlaveAddr &= ~(1); //SlaveAddr is Slave address + r/nw bit=0, 7 bits are for slave address and clearing 0 bit for write operation
 800082a:	78fb      	ldrb	r3, [r7, #3]
 800082c:	f023 0301 	bic.w	r3, r3, #1
 8000830:	70fb      	strb	r3, [r7, #3]
	pI2Cx->I2C_DR = SlaveAddr; //put slave address in the data register
 8000832:	78fa      	ldrb	r2, [r7, #3]
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	611a      	str	r2, [r3, #16]
}
 8000838:	bf00      	nop
 800083a:	370c      	adds	r7, #12
 800083c:	46bd      	mov	sp, r7
 800083e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000842:	4770      	bx	lr

08000844 <I2C_ClearADDRFlag>:
}


//function to clear addr flag
static void I2C_ClearADDRFlag(I2C_Handle_t *pI2CHandle )//same process as master receive data
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b084      	sub	sp, #16
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
	uint32_t dummy_read;
	//check for device mode
	if(pI2CHandle->pI2Cx->I2C_SR2 & ( 1 << I2C_SR2_MSL))//for master mode of the device
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	699b      	ldr	r3, [r3, #24]
 8000852:	f003 0301 	and.w	r3, r3, #1
 8000856:	2b00      	cmp	r3, #0
 8000858:	d01f      	beq.n	800089a <I2C_ClearADDRFlag+0x56>
	{
		//device is in master mode
		if(pI2CHandle->TxRxState == I2C_BUSY_IN_RX)//if it is busy in reading/receiving data from slave
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	7f1b      	ldrb	r3, [r3, #28]
 800085e:	2b01      	cmp	r3, #1
 8000860:	d112      	bne.n	8000888 <I2C_ClearADDRFlag+0x44>
		{
			if(pI2CHandle->RxSize  == 1)
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	6a1b      	ldr	r3, [r3, #32]
 8000866:	2b01      	cmp	r3, #1
 8000868:	d11f      	bne.n	80008aa <I2C_ClearADDRFlag+0x66>
			{
				//first disable the ack
				I2C_ManageAcking(pI2CHandle->pI2Cx,DISABLE);
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	2100      	movs	r1, #0
 8000870:	4618      	mov	r0, r3
 8000872:	f000 f82e 	bl	80008d2 <I2C_ManageAcking>

				//clear the ADDR flag ( read SR1 , read SR2)
				dummy_read = pI2CHandle->pI2Cx->I2C_SR1;
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	695b      	ldr	r3, [r3, #20]
 800087c:	60fb      	str	r3, [r7, #12]
				dummy_read = pI2CHandle->pI2Cx->I2C_SR2;
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	699b      	ldr	r3, [r3, #24]
 8000884:	60fb      	str	r3, [r7, #12]
		dummy_read = pI2CHandle->pI2Cx->I2C_SR2;
		(void)dummy_read;
	}


}
 8000886:	e010      	b.n	80008aa <I2C_ClearADDRFlag+0x66>
			dummy_read = pI2CHandle->pI2Cx->I2C_SR1;
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	695b      	ldr	r3, [r3, #20]
 800088e:	60fb      	str	r3, [r7, #12]
			dummy_read = pI2CHandle->pI2Cx->I2C_SR2;
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	699b      	ldr	r3, [r3, #24]
 8000896:	60fb      	str	r3, [r7, #12]
}
 8000898:	e007      	b.n	80008aa <I2C_ClearADDRFlag+0x66>
		dummy_read = pI2CHandle->pI2Cx->I2C_SR1;
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	695b      	ldr	r3, [r3, #20]
 80008a0:	60fb      	str	r3, [r7, #12]
		dummy_read = pI2CHandle->pI2Cx->I2C_SR2;
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	699b      	ldr	r3, [r3, #24]
 80008a8:	60fb      	str	r3, [r7, #12]
}
 80008aa:	bf00      	nop
 80008ac:	3710      	adds	r7, #16
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}

080008b2 <I2C_GenerateStopCondition>:


//function to generate stop condition
void I2C_GenerateStopCondition(I2C_RegDef_t *pI2Cx)
{
 80008b2:	b480      	push	{r7}
 80008b4:	b083      	sub	sp, #12
 80008b6:	af00      	add	r7, sp, #0
 80008b8:	6078      	str	r0, [r7, #4]
	pI2Cx->I2C_CR1 |= ( 1 << I2C_CR1_STOP);
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	601a      	str	r2, [r3, #0]
}
 80008c6:	bf00      	nop
 80008c8:	370c      	adds	r7, #12
 80008ca:	46bd      	mov	sp, r7
 80008cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d0:	4770      	bx	lr

080008d2 <I2C_ManageAcking>:


//function to manage acking, i.e. to enable oe disable acking
void I2C_ManageAcking(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
{
 80008d2:	b480      	push	{r7}
 80008d4:	b083      	sub	sp, #12
 80008d6:	af00      	add	r7, sp, #0
 80008d8:	6078      	str	r0, [r7, #4]
 80008da:	460b      	mov	r3, r1
 80008dc:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == I2C_ACK_ENABLE)
 80008de:	78fb      	ldrb	r3, [r7, #3]
 80008e0:	2b01      	cmp	r3, #1
 80008e2:	d106      	bne.n	80008f2 <I2C_ManageAcking+0x20>
	{
		//enable the ack
		pI2Cx->I2C_CR1 |= ( 1 << I2C_CR1_ACK);
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	601a      	str	r2, [r3, #0]
	}else
	{
		//disable the ack
		pI2Cx->I2C_CR1 &= ~( 1 << I2C_CR1_ACK);
	}
}
 80008f0:	e005      	b.n	80008fe <I2C_ManageAcking+0x2c>
		pI2Cx->I2C_CR1 &= ~( 1 << I2C_CR1_ACK);
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	601a      	str	r2, [r3, #0]
}
 80008fe:	bf00      	nop
 8000900:	370c      	adds	r7, #12
 8000902:	46bd      	mov	sp, r7
 8000904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000908:	4770      	bx	lr

0800090a <I2C_PeripheralControl>:
 *@parameter 2-   variable indicating whether to enable or disable I2C peripheral
 *@return - none
 * @Note              -
 */
void I2C_PeripheralControl(I2C_RegDef_t *pI2Cx, uint8_t EnOrDi)
{
 800090a:	b480      	push	{r7}
 800090c:	b083      	sub	sp, #12
 800090e:	af00      	add	r7, sp, #0
 8000910:	6078      	str	r0, [r7, #4]
 8000912:	460b      	mov	r3, r1
 8000914:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8000916:	78fb      	ldrb	r3, [r7, #3]
 8000918:	2b01      	cmp	r3, #1
 800091a:	d106      	bne.n	800092a <I2C_PeripheralControl+0x20>
	{
		pI2Cx->I2C_CR1 |= (1 << I2C_CR1_PE);
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	f043 0201 	orr.w	r2, r3, #1
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	601a      	str	r2, [r3, #0]
	}else
	{
		pI2Cx->I2C_CR1 &= ~(1 << I2C_CR1_PE);
	}

}
 8000928:	e005      	b.n	8000936 <I2C_PeripheralControl+0x2c>
		pI2Cx->I2C_CR1 &= ~(1 << I2C_CR1_PE);
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	f023 0201 	bic.w	r2, r3, #1
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	601a      	str	r2, [r3, #0]
}
 8000936:	bf00      	nop
 8000938:	370c      	adds	r7, #12
 800093a:	46bd      	mov	sp, r7
 800093c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000940:	4770      	bx	lr
	...

08000944 <I2C_PeriClockControl>:
 * @Note
 *
 * @Note              -
 */
void I2C_PeriClockControl(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
{
 8000944:	b480      	push	{r7}
 8000946:	b083      	sub	sp, #12
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
 800094c:	460b      	mov	r3, r1
 800094e:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000950:	78fb      	ldrb	r3, [r7, #3]
 8000952:	2b01      	cmp	r3, #1
 8000954:	d120      	bne.n	8000998 <I2C_PeriClockControl+0x54>
	{
		if(pI2Cx == I2C1)
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	4a22      	ldr	r2, [pc, #136]	; (80009e4 <I2C_PeriClockControl+0xa0>)
 800095a:	4293      	cmp	r3, r2
 800095c:	d106      	bne.n	800096c <I2C_PeriClockControl+0x28>
		{
			I2C1_PCLK_EN();
 800095e:	4b22      	ldr	r3, [pc, #136]	; (80009e8 <I2C_PeriClockControl+0xa4>)
 8000960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000962:	4a21      	ldr	r2, [pc, #132]	; (80009e8 <I2C_PeriClockControl+0xa4>)
 8000964:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000968:	6413      	str	r3, [r2, #64]	; 0x40
		{
			I2C3_PCLK_DI();
		}

  }
}
 800096a:	e035      	b.n	80009d8 <I2C_PeriClockControl+0x94>
		}else if (pI2Cx == I2C2)
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	4a1f      	ldr	r2, [pc, #124]	; (80009ec <I2C_PeriClockControl+0xa8>)
 8000970:	4293      	cmp	r3, r2
 8000972:	d106      	bne.n	8000982 <I2C_PeriClockControl+0x3e>
			I2C2_PCLK_EN();
 8000974:	4b1c      	ldr	r3, [pc, #112]	; (80009e8 <I2C_PeriClockControl+0xa4>)
 8000976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000978:	4a1b      	ldr	r2, [pc, #108]	; (80009e8 <I2C_PeriClockControl+0xa4>)
 800097a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800097e:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000980:	e02a      	b.n	80009d8 <I2C_PeriClockControl+0x94>
		}else if (pI2Cx == I2C3)
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	4a1a      	ldr	r2, [pc, #104]	; (80009f0 <I2C_PeriClockControl+0xac>)
 8000986:	4293      	cmp	r3, r2
 8000988:	d126      	bne.n	80009d8 <I2C_PeriClockControl+0x94>
			I2C3_PCLK_EN();
 800098a:	4b17      	ldr	r3, [pc, #92]	; (80009e8 <I2C_PeriClockControl+0xa4>)
 800098c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800098e:	4a16      	ldr	r2, [pc, #88]	; (80009e8 <I2C_PeriClockControl+0xa4>)
 8000990:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000994:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000996:	e01f      	b.n	80009d8 <I2C_PeriClockControl+0x94>
		if(pI2Cx == I2C1)
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	4a12      	ldr	r2, [pc, #72]	; (80009e4 <I2C_PeriClockControl+0xa0>)
 800099c:	4293      	cmp	r3, r2
 800099e:	d106      	bne.n	80009ae <I2C_PeriClockControl+0x6a>
	       I2C1_PCLK_DI();
 80009a0:	4b11      	ldr	r3, [pc, #68]	; (80009e8 <I2C_PeriClockControl+0xa4>)
 80009a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a4:	4a10      	ldr	r2, [pc, #64]	; (80009e8 <I2C_PeriClockControl+0xa4>)
 80009a6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80009aa:	6413      	str	r3, [r2, #64]	; 0x40
}
 80009ac:	e014      	b.n	80009d8 <I2C_PeriClockControl+0x94>
		else if(pI2Cx == I2C2)
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	4a0e      	ldr	r2, [pc, #56]	; (80009ec <I2C_PeriClockControl+0xa8>)
 80009b2:	4293      	cmp	r3, r2
 80009b4:	d106      	bne.n	80009c4 <I2C_PeriClockControl+0x80>
			I2C2_PCLK_DI();
 80009b6:	4b0c      	ldr	r3, [pc, #48]	; (80009e8 <I2C_PeriClockControl+0xa4>)
 80009b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ba:	4a0b      	ldr	r2, [pc, #44]	; (80009e8 <I2C_PeriClockControl+0xa4>)
 80009bc:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80009c0:	6413      	str	r3, [r2, #64]	; 0x40
}
 80009c2:	e009      	b.n	80009d8 <I2C_PeriClockControl+0x94>
		else if(pI2Cx == I2C3)
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	4a0a      	ldr	r2, [pc, #40]	; (80009f0 <I2C_PeriClockControl+0xac>)
 80009c8:	4293      	cmp	r3, r2
 80009ca:	d105      	bne.n	80009d8 <I2C_PeriClockControl+0x94>
			I2C3_PCLK_DI();
 80009cc:	4b06      	ldr	r3, [pc, #24]	; (80009e8 <I2C_PeriClockControl+0xa4>)
 80009ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d0:	4a05      	ldr	r2, [pc, #20]	; (80009e8 <I2C_PeriClockControl+0xa4>)
 80009d2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80009d6:	6413      	str	r3, [r2, #64]	; 0x40
}
 80009d8:	bf00      	nop
 80009da:	370c      	adds	r7, #12
 80009dc:	46bd      	mov	sp, r7
 80009de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e2:	4770      	bx	lr
 80009e4:	40005400 	.word	0x40005400
 80009e8:	40023800 	.word	0x40023800
 80009ec:	40005800 	.word	0x40005800
 80009f0:	40005c00 	.word	0x40005c00

080009f4 <I2C_Init>:
 * @return            -nothing
 *
 * @Note              -
 */
void I2C_Init(I2C_Handle_t *pI2CHandle)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b084      	sub	sp, #16
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
	uint32_t tempreg = 0 ;
 80009fc:	2300      	movs	r3, #0
 80009fe:	60fb      	str	r3, [r7, #12]

	//enable the clock for the i2cx peripheral
	I2C_PeriClockControl(pI2CHandle->pI2Cx,ENABLE);
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	2101      	movs	r1, #1
 8000a06:	4618      	mov	r0, r3
 8000a08:	f7ff ff9c 	bl	8000944 <I2C_PeriClockControl>

	//ack control bit of CR1 register
	tempreg |= pI2CHandle->I2C_Config.I2C_AckControl << 10;// for cr1 register
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	7a5b      	ldrb	r3, [r3, #9]
 8000a10:	029b      	lsls	r3, r3, #10
 8000a12:	461a      	mov	r2, r3
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	4313      	orrs	r3, r2
 8000a18:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->I2C_CR1 = tempreg;
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	68fa      	ldr	r2, [r7, #12]
 8000a20:	601a      	str	r2, [r3, #0]

	//configure the FREQ field of CR2 , freq = to decide what is the freq of apb1 bus
	tempreg = 0;
 8000a22:	2300      	movs	r3, #0
 8000a24:	60fb      	str	r3, [r7, #12]
	tempreg |= RCC_GetPCLK1Value() /1000000U ; // we want only 16 not full 16mhz hence divide by 1000000
 8000a26:	f000 f90f 	bl	8000c48 <RCC_GetPCLK1Value>
 8000a2a:	4602      	mov	r2, r0
 8000a2c:	4b47      	ldr	r3, [pc, #284]	; (8000b4c <I2C_Init+0x158>)
 8000a2e:	fba3 2302 	umull	r2, r3, r3, r2
 8000a32:	0c9b      	lsrs	r3, r3, #18
 8000a34:	68fa      	ldr	r2, [r7, #12]
 8000a36:	4313      	orrs	r3, r2
 8000a38:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->I2C_CR2 =  (tempreg & 0x3F); // as freq only has 5 bits so we bit mask them rather whole register
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	68fa      	ldr	r2, [r7, #12]
 8000a40:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000a44:	605a      	str	r2, [r3, #4]

   //program the device own address- when device acts as a slave
	tempreg = 0;
 8000a46:	2300      	movs	r3, #0
 8000a48:	60fb      	str	r3, [r7, #12]
	tempreg |= pI2CHandle->I2C_Config.I2C_DeviceAddress << 1;// as it start from bit position 1 on OAR1 register
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	7a1b      	ldrb	r3, [r3, #8]
 8000a4e:	005b      	lsls	r3, r3, #1
 8000a50:	461a      	mov	r2, r3
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	4313      	orrs	r3, r2
 8000a56:	60fb      	str	r3, [r7, #12]
	tempreg |= ( 1 << 14);
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a5e:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->I2C_OAR1 = tempreg;
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	68fa      	ldr	r2, [r7, #12]
 8000a66:	609a      	str	r2, [r3, #8]

	//CCR calculations --> to produce different serial clock speeds
	uint16_t ccr_value = 0;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	817b      	strh	r3, [r7, #10]
	tempreg = 0;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	60fb      	str	r3, [r7, #12]
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	685b      	ldr	r3, [r3, #4]
 8000a74:	4a36      	ldr	r2, [pc, #216]	; (8000b50 <I2C_Init+0x15c>)
 8000a76:	4293      	cmp	r3, r2
 8000a78:	d80f      	bhi.n	8000a9a <I2C_Init+0xa6>
	{
		//mode is standard mode
		ccr_value = (RCC_GetPCLK1Value() / ( 2 * pI2CHandle->I2C_Config.I2C_SCLSpeed ) ); //I2C_Config.I2C_SCLSpeed gives freq given by user
 8000a7a:	f000 f8e5 	bl	8000c48 <RCC_GetPCLK1Value>
 8000a7e:	4602      	mov	r2, r0
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	685b      	ldr	r3, [r3, #4]
 8000a84:	005b      	lsls	r3, r3, #1
 8000a86:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a8a:	817b      	strh	r3, [r7, #10]
		tempreg |= (ccr_value & 0xFFF);  // as we want only first 12 bits in I2C_CCR register so we use bit masking in first 12 bits
 8000a8c:	897b      	ldrh	r3, [r7, #10]
 8000a8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000a92:	68fa      	ldr	r2, [r7, #12]
 8000a94:	4313      	orrs	r3, r2
 8000a96:	60fb      	str	r3, [r7, #12]
 8000a98:	e02d      	b.n	8000af6 <I2C_Init+0x102>
	}else
	{
		//mode is fast mode
		tempreg |= ( 1 << 15);// to configure the mode as fast mode in master mode
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000aa0:	60fb      	str	r3, [r7, #12]
		tempreg |= (pI2CHandle->I2C_Config.I2C_FMDutyCycle << 14); // to set the duty cycle of our system
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	7a9b      	ldrb	r3, [r3, #10]
 8000aa6:	039b      	lsls	r3, r3, #14
 8000aa8:	461a      	mov	r2, r3
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	4313      	orrs	r3, r2
 8000aae:	60fb      	str	r3, [r7, #12]
		if(pI2CHandle->I2C_Config.I2C_FMDutyCycle == I2C_FM_DUTY_2)
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	7a9b      	ldrb	r3, [r3, #10]
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d10b      	bne.n	8000ad0 <I2C_Init+0xdc>
		{
			ccr_value = (RCC_GetPCLK1Value() / ( 3 * pI2CHandle->I2C_Config.I2C_SCLSpeed ) );
 8000ab8:	f000 f8c6 	bl	8000c48 <RCC_GetPCLK1Value>
 8000abc:	4601      	mov	r1, r0
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	685a      	ldr	r2, [r3, #4]
 8000ac2:	4613      	mov	r3, r2
 8000ac4:	005b      	lsls	r3, r3, #1
 8000ac6:	4413      	add	r3, r2
 8000ac8:	fbb1 f3f3 	udiv	r3, r1, r3
 8000acc:	817b      	strh	r3, [r7, #10]
 8000ace:	e00c      	b.n	8000aea <I2C_Init+0xf6>
		}else
		{
			ccr_value = (RCC_GetPCLK1Value() / ( 25 * pI2CHandle->I2C_Config.I2C_SCLSpeed ) );
 8000ad0:	f000 f8ba 	bl	8000c48 <RCC_GetPCLK1Value>
 8000ad4:	4601      	mov	r1, r0
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	685a      	ldr	r2, [r3, #4]
 8000ada:	4613      	mov	r3, r2
 8000adc:	009b      	lsls	r3, r3, #2
 8000ade:	4413      	add	r3, r2
 8000ae0:	009a      	lsls	r2, r3, #2
 8000ae2:	4413      	add	r3, r2
 8000ae4:	fbb1 f3f3 	udiv	r3, r1, r3
 8000ae8:	817b      	strh	r3, [r7, #10]
		}
		tempreg |= (ccr_value & 0xFFF);
 8000aea:	897b      	ldrh	r3, [r7, #10]
 8000aec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000af0:	68fa      	ldr	r2, [r7, #12]
 8000af2:	4313      	orrs	r3, r2
 8000af4:	60fb      	str	r3, [r7, #12]
	}
	pI2CHandle->pI2Cx->I2C_CCR = tempreg;
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	68fa      	ldr	r2, [r7, #12]
 8000afc:	61da      	str	r2, [r3, #28]

	//TRISE Configuration
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)//choosing the standard mode
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	685b      	ldr	r3, [r3, #4]
 8000b02:	4a13      	ldr	r2, [pc, #76]	; (8000b50 <I2C_Init+0x15c>)
 8000b04:	4293      	cmp	r3, r2
 8000b06:	d809      	bhi.n	8000b1c <I2C_Init+0x128>
	{
		//mode is standard mode

		tempreg = (RCC_GetPCLK1Value() /1000000U) + 1 ;
 8000b08:	f000 f89e 	bl	8000c48 <RCC_GetPCLK1Value>
 8000b0c:	4602      	mov	r2, r0
 8000b0e:	4b0f      	ldr	r3, [pc, #60]	; (8000b4c <I2C_Init+0x158>)
 8000b10:	fba3 2302 	umull	r2, r3, r3, r2
 8000b14:	0c9b      	lsrs	r3, r3, #18
 8000b16:	3301      	adds	r3, #1
 8000b18:	60fb      	str	r3, [r7, #12]
 8000b1a:	e00d      	b.n	8000b38 <I2C_Init+0x144>

	}else
	{
		//mode is fast mode
		tempreg = ( (RCC_GetPCLK1Value() * 300) / 1000000000U ) + 1; //300ns is max. rise time
 8000b1c:	f000 f894 	bl	8000c48 <RCC_GetPCLK1Value>
 8000b20:	4602      	mov	r2, r0
 8000b22:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000b26:	fb03 f302 	mul.w	r3, r3, r2
 8000b2a:	0a5b      	lsrs	r3, r3, #9
 8000b2c:	4a09      	ldr	r2, [pc, #36]	; (8000b54 <I2C_Init+0x160>)
 8000b2e:	fba2 2303 	umull	r2, r3, r2, r3
 8000b32:	09db      	lsrs	r3, r3, #7
 8000b34:	3301      	adds	r3, #1
 8000b36:	60fb      	str	r3, [r7, #12]

	}

	pI2CHandle->pI2Cx->I2C_TRISE = (tempreg & 0x3F);//mask first 5 bits which store trise value
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	68fa      	ldr	r2, [r7, #12]
 8000b3e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000b42:	621a      	str	r2, [r3, #32]

}
 8000b44:	bf00      	nop
 8000b46:	3710      	adds	r7, #16
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	431bde83 	.word	0x431bde83
 8000b50:	000186a0 	.word	0x000186a0
 8000b54:	00044b83 	.word	0x00044b83

08000b58 <I2C_MasterSendData>:


//to send data from master to slave without using interrupts
void I2C_MasterSendData(I2C_Handle_t *pI2CHandle,uint8_t *pTxbuffer, uint32_t Len, uint8_t SlaveAddr,uint8_t Sr)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b084      	sub	sp, #16
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	60f8      	str	r0, [r7, #12]
 8000b60:	60b9      	str	r1, [r7, #8]
 8000b62:	607a      	str	r2, [r7, #4]
 8000b64:	70fb      	strb	r3, [r7, #3]
	// 1. Generate the START condition
	I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f7ff fe44 	bl	80007f8 <I2C_GenerateStartCondition>

	//2. confirm that start generation is completed by checking the SB flag in the SR1
	//Note: Until SB is cleared SCL will be stretched (pulled to LOW) , check how we clear SB flag in data sheet
	while( !  I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_SB)   ); //wait until SB is set
 8000b70:	bf00      	nop
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	2101      	movs	r1, #1
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f000 f850 	bl	8000c1e <I2C_GetFlagStatus>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d0f6      	beq.n	8000b72 <I2C_MasterSendData+0x1a>

	//3. Send the address of the slave with r/nw bit set to w(0) (total 8 bits )
	I2C_ExecuteAddressPhaseWrite(pI2CHandle->pI2Cx,SlaveAddr);
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	78fa      	ldrb	r2, [r7, #3]
 8000b8a:	4611      	mov	r1, r2
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f7ff fe43 	bl	8000818 <I2C_ExecuteAddressPhaseWrite>

	//4. Confirm that address phase is completed by checking the ADDR flag in teh SR1
	while( !  I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_ADDR)   );
 8000b92:	bf00      	nop
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	2102      	movs	r1, #2
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f000 f83f 	bl	8000c1e <I2C_GetFlagStatus>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d0f6      	beq.n	8000b94 <I2C_MasterSendData+0x3c>

	//5. clear the ADDR flag according to its software sequence
	//   Note: Until ADDR is cleared SCL will be stretched (pulled to LOW)
	I2C_ClearADDRFlag(pI2CHandle);
 8000ba6:	68f8      	ldr	r0, [r7, #12]
 8000ba8:	f7ff fe4c 	bl	8000844 <I2C_ClearADDRFlag>

	//6. send the data until len becomes 0

	while(Len > 0)
 8000bac:	e014      	b.n	8000bd8 <I2C_MasterSendData+0x80>
	{
		while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_TXE) ); //Wait till TXE is set then only we can send the data
 8000bae:	bf00      	nop
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	2180      	movs	r1, #128	; 0x80
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f000 f831 	bl	8000c1e <I2C_GetFlagStatus>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d0f6      	beq.n	8000bb0 <I2C_MasterSendData+0x58>
		pI2CHandle->pI2Cx->I2C_DR = *pTxbuffer;
 8000bc2:	68bb      	ldr	r3, [r7, #8]
 8000bc4:	781a      	ldrb	r2, [r3, #0]
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	611a      	str	r2, [r3, #16]
		pTxbuffer++;
 8000bcc:	68bb      	ldr	r3, [r7, #8]
 8000bce:	3301      	adds	r3, #1
 8000bd0:	60bb      	str	r3, [r7, #8]
		Len--;
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	3b01      	subs	r3, #1
 8000bd6:	607b      	str	r3, [r7, #4]
	while(Len > 0)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d1e7      	bne.n	8000bae <I2C_MasterSendData+0x56>

	//7. when Len becomes zero wait for TXE=1 and BTF=1 before generating the STOP condition
	//   Note: TXE=1 , BTF=1 , means that both SR and DR are empty and next transmission should begin
	//   when BTF=1 SCL will be stretched (pulled to LOW)

	while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_TXE) );//wait until txe is set
 8000bde:	bf00      	nop
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	2180      	movs	r1, #128	; 0x80
 8000be6:	4618      	mov	r0, r3
 8000be8:	f000 f819 	bl	8000c1e <I2C_GetFlagStatus>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d0f6      	beq.n	8000be0 <I2C_MasterSendData+0x88>

	while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_BTF) );//wait until btf is set
 8000bf2:	bf00      	nop
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	2104      	movs	r1, #4
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f000 f80f 	bl	8000c1e <I2C_GetFlagStatus>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d0f6      	beq.n	8000bf4 <I2C_MasterSendData+0x9c>


	//8. Generate STOP condition and master need not to wait for the completion of stop condition.
	//   Note: generating STOP, automatically clears the BTF

	if(Sr == I2C_DISABLE_SR )
 8000c06:	7e3b      	ldrb	r3, [r7, #24]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d104      	bne.n	8000c16 <I2C_MasterSendData+0xbe>
	     I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4618      	mov	r0, r3
 8000c12:	f7ff fe4e 	bl	80008b2 <I2C_GenerateStopCondition>

}
 8000c16:	bf00      	nop
 8000c18:	3710      	adds	r7, #16
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}

08000c1e <I2C_GetFlagStatus>:



//to get status of each FLAG
uint8_t I2C_GetFlagStatus(I2C_RegDef_t *pI2Cx , uint32_t FlagName)
{
 8000c1e:	b480      	push	{r7}
 8000c20:	b083      	sub	sp, #12
 8000c22:	af00      	add	r7, sp, #0
 8000c24:	6078      	str	r0, [r7, #4]
 8000c26:	6039      	str	r1, [r7, #0]
	if(pI2Cx->I2C_SR1 & FlagName)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	695a      	ldr	r2, [r3, #20]
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	4013      	ands	r3, r2
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d001      	beq.n	8000c38 <I2C_GetFlagStatus+0x1a>
	{
		return FLAG_SET;
 8000c34:	2301      	movs	r3, #1
 8000c36:	e000      	b.n	8000c3a <I2C_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 8000c38:	2300      	movs	r3, #0
}
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	370c      	adds	r7, #12
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr
	...

08000c48 <RCC_GetPCLK1Value>:



//to get the pclk value for our system
uint32_t RCC_GetPCLK1Value(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b086      	sub	sp, #24
 8000c4c:	af00      	add	r7, sp, #0

	uint32_t pclk1,SystemClk;
	uint32_t clksrc,temp,ahbp,apb1p;

	clksrc = ((RCC->CFGR >> 2) & 0x03);  // we are shifting each bit of clock configuration by 2 places to right and bit mask with 0x03 to get bit 0 and bit 1 only
 8000c4e:	4b24      	ldr	r3, [pc, #144]	; (8000ce0 <RCC_GetPCLK1Value+0x98>)
 8000c50:	689b      	ldr	r3, [r3, #8]
 8000c52:	089b      	lsrs	r3, r3, #2
 8000c54:	f003 0303 	and.w	r3, r3, #3
 8000c58:	60bb      	str	r3, [r7, #8]
	                                     // and make all other bits to zero.

	if(clksrc == 0)
 8000c5a:	68bb      	ldr	r3, [r7, #8]
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d102      	bne.n	8000c66 <RCC_GetPCLK1Value+0x1e>
	{
		SystemClk = 16000000;
 8000c60:	4b20      	ldr	r3, [pc, #128]	; (8000ce4 <RCC_GetPCLK1Value+0x9c>)
 8000c62:	617b      	str	r3, [r7, #20]
 8000c64:	e00b      	b.n	8000c7e <RCC_GetPCLK1Value+0x36>
	}
	else if(clksrc == 1)
 8000c66:	68bb      	ldr	r3, [r7, #8]
 8000c68:	2b01      	cmp	r3, #1
 8000c6a:	d102      	bne.n	8000c72 <RCC_GetPCLK1Value+0x2a>
	{

		SystemClk = 8000000;
 8000c6c:	4b1e      	ldr	r3, [pc, #120]	; (8000ce8 <RCC_GetPCLK1Value+0xa0>)
 8000c6e:	617b      	str	r3, [r7, #20]
 8000c70:	e005      	b.n	8000c7e <RCC_GetPCLK1Value+0x36>
	}

		else if(clksrc == 2)
 8000c72:	68bb      	ldr	r3, [r7, #8]
 8000c74:	2b02      	cmp	r3, #2
 8000c76:	d102      	bne.n	8000c7e <RCC_GetPCLK1Value+0x36>
		{

			SystemClk = RCC_GetPLLOutputClock();
 8000c78:	f000 f83c 	bl	8000cf4 <RCC_GetPLLOutputClock>
 8000c7c:	6178      	str	r0, [r7, #20]

		}
           //for AHB prescaler
          temp = ((RCC->CFGR >> 4 ) & 0xF);// we right shift the value by 4 to get prescaler value and then we bit mask it
 8000c7e:	4b18      	ldr	r3, [pc, #96]	; (8000ce0 <RCC_GetPCLK1Value+0x98>)
 8000c80:	689b      	ldr	r3, [r3, #8]
 8000c82:	091b      	lsrs	r3, r3, #4
 8000c84:	f003 030f 	and.w	r3, r3, #15
 8000c88:	607b      	str	r3, [r7, #4]

          if(temp < 8)
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	2b07      	cmp	r3, #7
 8000c8e:	d802      	bhi.n	8000c96 <RCC_GetPCLK1Value+0x4e>
          {
        	  ahbp = 1;
 8000c90:	2301      	movs	r3, #1
 8000c92:	613b      	str	r3, [r7, #16]
 8000c94:	e005      	b.n	8000ca2 <RCC_GetPCLK1Value+0x5a>
          }
          else
          {
        	  ahbp = AHB_PreScaler[temp-8];
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	3b08      	subs	r3, #8
 8000c9a:	4a14      	ldr	r2, [pc, #80]	; (8000cec <RCC_GetPCLK1Value+0xa4>)
 8000c9c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ca0:	613b      	str	r3, [r7, #16]

          }

      // for APB1 prescaler
          temp = ((RCC->CFGR >> 10 ) & 0x7);// we right shift the value by 4 to get prescaler value and then we bit mask it
 8000ca2:	4b0f      	ldr	r3, [pc, #60]	; (8000ce0 <RCC_GetPCLK1Value+0x98>)
 8000ca4:	689b      	ldr	r3, [r3, #8]
 8000ca6:	0a9b      	lsrs	r3, r3, #10
 8000ca8:	f003 0307 	and.w	r3, r3, #7
 8000cac:	607b      	str	r3, [r7, #4]

                 if(temp < 4)
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	2b03      	cmp	r3, #3
 8000cb2:	d802      	bhi.n	8000cba <RCC_GetPCLK1Value+0x72>
                 {
               	  apb1p = 1;
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	60fb      	str	r3, [r7, #12]
 8000cb8:	e004      	b.n	8000cc4 <RCC_GetPCLK1Value+0x7c>
                 }
                 else
                 {
               	  apb1p = APB1_Prescaler[temp-4];
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	3b04      	subs	r3, #4
 8000cbe:	4a0c      	ldr	r2, [pc, #48]	; (8000cf0 <RCC_GetPCLK1Value+0xa8>)
 8000cc0:	5cd3      	ldrb	r3, [r2, r3]
 8000cc2:	60fb      	str	r3, [r7, #12]

                 }

                 pclk1 = (SystemClk / ahbp) /apb1p;
 8000cc4:	697a      	ldr	r2, [r7, #20]
 8000cc6:	693b      	ldr	r3, [r7, #16]
 8000cc8:	fbb2 f2f3 	udiv	r2, r2, r3
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cd2:	603b      	str	r3, [r7, #0]

                 return pclk1;  // frequency of clock
 8000cd4:	683b      	ldr	r3, [r7, #0]

}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	3718      	adds	r7, #24
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	40023800 	.word	0x40023800
 8000ce4:	00f42400 	.word	0x00f42400
 8000ce8:	007a1200 	.word	0x007a1200
 8000cec:	2000000c 	.word	0x2000000c
 8000cf0:	2000001c 	.word	0x2000001c

08000cf4 <RCC_GetPLLOutputClock>:
}



uint32_t  RCC_GetPLLOutputClock()
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0

	return 0;
 8000cf8:	2300      	movs	r3, #0
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d02:	4770      	bx	lr

08000d04 <__libc_init_array>:
 8000d04:	b570      	push	{r4, r5, r6, lr}
 8000d06:	4e0d      	ldr	r6, [pc, #52]	; (8000d3c <__libc_init_array+0x38>)
 8000d08:	4c0d      	ldr	r4, [pc, #52]	; (8000d40 <__libc_init_array+0x3c>)
 8000d0a:	1ba4      	subs	r4, r4, r6
 8000d0c:	10a4      	asrs	r4, r4, #2
 8000d0e:	2500      	movs	r5, #0
 8000d10:	42a5      	cmp	r5, r4
 8000d12:	d109      	bne.n	8000d28 <__libc_init_array+0x24>
 8000d14:	4e0b      	ldr	r6, [pc, #44]	; (8000d44 <__libc_init_array+0x40>)
 8000d16:	4c0c      	ldr	r4, [pc, #48]	; (8000d48 <__libc_init_array+0x44>)
 8000d18:	f000 f818 	bl	8000d4c <_init>
 8000d1c:	1ba4      	subs	r4, r4, r6
 8000d1e:	10a4      	asrs	r4, r4, #2
 8000d20:	2500      	movs	r5, #0
 8000d22:	42a5      	cmp	r5, r4
 8000d24:	d105      	bne.n	8000d32 <__libc_init_array+0x2e>
 8000d26:	bd70      	pop	{r4, r5, r6, pc}
 8000d28:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000d2c:	4798      	blx	r3
 8000d2e:	3501      	adds	r5, #1
 8000d30:	e7ee      	b.n	8000d10 <__libc_init_array+0xc>
 8000d32:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000d36:	4798      	blx	r3
 8000d38:	3501      	adds	r5, #1
 8000d3a:	e7f2      	b.n	8000d22 <__libc_init_array+0x1e>
 8000d3c:	08000d64 	.word	0x08000d64
 8000d40:	08000d64 	.word	0x08000d64
 8000d44:	08000d64 	.word	0x08000d64
 8000d48:	08000d68 	.word	0x08000d68

08000d4c <_init>:
 8000d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d4e:	bf00      	nop
 8000d50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d52:	bc08      	pop	{r3}
 8000d54:	469e      	mov	lr, r3
 8000d56:	4770      	bx	lr

08000d58 <_fini>:
 8000d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d5a:	bf00      	nop
 8000d5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d5e:	bc08      	pop	{r3}
 8000d60:	469e      	mov	lr, r3
 8000d62:	4770      	bx	lr
